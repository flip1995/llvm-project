; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv32_cheri_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IXCHERI %s
; RUN: %riscv32_cheri_llc -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IAXCHERI %s
; RUN: %riscv64_cheri_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IXCHERI %s
; RUN: %riscv64_cheri_llc -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IAXCHERI %s

define i8 addrspace(200)* @atomicrmw_xchg_cap_monotonic(i8 addrspace(200)** %a, i8 addrspace(200)* %b) nounwind {
; RV32IXCHERI-LABEL: atomicrmw_xchg_cap_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    addi sp, sp, -32
; RV32IXCHERI-NEXT:    sw ra, 28(sp)
; RV32IXCHERI-NEXT:    mv a4, a0
; RV32IXCHERI-NEXT:    sc ca1, 16(sp)
; RV32IXCHERI-NEXT:    addi a2, sp, 16
; RV32IXCHERI-NEXT:    addi a3, sp, 8
; RV32IXCHERI-NEXT:    addi a0, zero, 8
; RV32IXCHERI-NEXT:    mv a1, a4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    call __atomic_exchange
; RV32IXCHERI-NEXT:    lc ca0, 8(sp)
; RV32IXCHERI-NEXT:    lw ra, 28(sp)
; RV32IXCHERI-NEXT:    addi sp, sp, 32
; RV32IXCHERI-NEXT:    ret
;
; RV32IAXCHERI-LABEL: atomicrmw_xchg_cap_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    amoswap.c ca0, ca1, (a0)
; RV32IAXCHERI-NEXT:    ret
;
; RV64IXCHERI-LABEL: atomicrmw_xchg_cap_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    addi sp, sp, -48
; RV64IXCHERI-NEXT:    sd ra, 40(sp)
; RV64IXCHERI-NEXT:    mv a4, a0
; RV64IXCHERI-NEXT:    sc ca1, 16(sp)
; RV64IXCHERI-NEXT:    addi a2, sp, 16
; RV64IXCHERI-NEXT:    mv a3, sp
; RV64IXCHERI-NEXT:    addi a0, zero, 16
; RV64IXCHERI-NEXT:    mv a1, a4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    call __atomic_exchange
; RV64IXCHERI-NEXT:    lc ca0, 0(sp)
; RV64IXCHERI-NEXT:    ld ra, 40(sp)
; RV64IXCHERI-NEXT:    addi sp, sp, 48
; RV64IXCHERI-NEXT:    ret
;
; RV64IAXCHERI-LABEL: atomicrmw_xchg_cap_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    amoswap.c ca0, ca1, (a0)
; RV64IAXCHERI-NEXT:    ret
  %1 = atomicrmw xchg i8 addrspace(200)** %a, i8 addrspace(200)* %b monotonic
  ret i8 addrspace(200)* %1
}

define i8 addrspace(200)* @atomicrmw_xchg_cap_acquire(i8 addrspace(200)** %a, i8 addrspace(200)* %b) nounwind {
; RV32IXCHERI-LABEL: atomicrmw_xchg_cap_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    addi sp, sp, -32
; RV32IXCHERI-NEXT:    sw ra, 28(sp)
; RV32IXCHERI-NEXT:    mv a5, a0
; RV32IXCHERI-NEXT:    sc ca1, 16(sp)
; RV32IXCHERI-NEXT:    addi a2, sp, 16
; RV32IXCHERI-NEXT:    addi a3, sp, 8
; RV32IXCHERI-NEXT:    addi a0, zero, 8
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    mv a1, a5
; RV32IXCHERI-NEXT:    call __atomic_exchange
; RV32IXCHERI-NEXT:    lc ca0, 8(sp)
; RV32IXCHERI-NEXT:    lw ra, 28(sp)
; RV32IXCHERI-NEXT:    addi sp, sp, 32
; RV32IXCHERI-NEXT:    ret
;
; RV32IAXCHERI-LABEL: atomicrmw_xchg_cap_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    amoswap.c.aq ca0, ca1, (a0)
; RV32IAXCHERI-NEXT:    ret
;
; RV64IXCHERI-LABEL: atomicrmw_xchg_cap_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    addi sp, sp, -48
; RV64IXCHERI-NEXT:    sd ra, 40(sp)
; RV64IXCHERI-NEXT:    mv a5, a0
; RV64IXCHERI-NEXT:    sc ca1, 16(sp)
; RV64IXCHERI-NEXT:    addi a2, sp, 16
; RV64IXCHERI-NEXT:    mv a3, sp
; RV64IXCHERI-NEXT:    addi a0, zero, 16
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    mv a1, a5
; RV64IXCHERI-NEXT:    call __atomic_exchange
; RV64IXCHERI-NEXT:    lc ca0, 0(sp)
; RV64IXCHERI-NEXT:    ld ra, 40(sp)
; RV64IXCHERI-NEXT:    addi sp, sp, 48
; RV64IXCHERI-NEXT:    ret
;
; RV64IAXCHERI-LABEL: atomicrmw_xchg_cap_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    amoswap.c.aq ca0, ca1, (a0)
; RV64IAXCHERI-NEXT:    ret
  %1 = atomicrmw xchg i8 addrspace(200)** %a, i8 addrspace(200)* %b acquire
  ret i8 addrspace(200)* %1
}

define i8 addrspace(200)* @atomicrmw_xchg_cap_release(i8 addrspace(200)** %a, i8 addrspace(200)* %b) nounwind {
; RV32IXCHERI-LABEL: atomicrmw_xchg_cap_release:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    addi sp, sp, -32
; RV32IXCHERI-NEXT:    sw ra, 28(sp)
; RV32IXCHERI-NEXT:    mv a5, a0
; RV32IXCHERI-NEXT:    sc ca1, 16(sp)
; RV32IXCHERI-NEXT:    addi a2, sp, 16
; RV32IXCHERI-NEXT:    addi a3, sp, 8
; RV32IXCHERI-NEXT:    addi a0, zero, 8
; RV32IXCHERI-NEXT:    addi a4, zero, 3
; RV32IXCHERI-NEXT:    mv a1, a5
; RV32IXCHERI-NEXT:    call __atomic_exchange
; RV32IXCHERI-NEXT:    lc ca0, 8(sp)
; RV32IXCHERI-NEXT:    lw ra, 28(sp)
; RV32IXCHERI-NEXT:    addi sp, sp, 32
; RV32IXCHERI-NEXT:    ret
;
; RV32IAXCHERI-LABEL: atomicrmw_xchg_cap_release:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    amoswap.c.rl ca0, ca1, (a0)
; RV32IAXCHERI-NEXT:    ret
;
; RV64IXCHERI-LABEL: atomicrmw_xchg_cap_release:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    addi sp, sp, -48
; RV64IXCHERI-NEXT:    sd ra, 40(sp)
; RV64IXCHERI-NEXT:    mv a5, a0
; RV64IXCHERI-NEXT:    sc ca1, 16(sp)
; RV64IXCHERI-NEXT:    addi a2, sp, 16
; RV64IXCHERI-NEXT:    mv a3, sp
; RV64IXCHERI-NEXT:    addi a0, zero, 16
; RV64IXCHERI-NEXT:    addi a4, zero, 3
; RV64IXCHERI-NEXT:    mv a1, a5
; RV64IXCHERI-NEXT:    call __atomic_exchange
; RV64IXCHERI-NEXT:    lc ca0, 0(sp)
; RV64IXCHERI-NEXT:    ld ra, 40(sp)
; RV64IXCHERI-NEXT:    addi sp, sp, 48
; RV64IXCHERI-NEXT:    ret
;
; RV64IAXCHERI-LABEL: atomicrmw_xchg_cap_release:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    amoswap.c.rl ca0, ca1, (a0)
; RV64IAXCHERI-NEXT:    ret
  %1 = atomicrmw xchg i8 addrspace(200)** %a, i8 addrspace(200)* %b release
  ret i8 addrspace(200)* %1
}

define i8 addrspace(200)* @atomicrmw_xchg_cap_acq_rel(i8 addrspace(200)** %a, i8 addrspace(200)* %b) nounwind {
; RV32IXCHERI-LABEL: atomicrmw_xchg_cap_acq_rel:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    addi sp, sp, -32
; RV32IXCHERI-NEXT:    sw ra, 28(sp)
; RV32IXCHERI-NEXT:    mv a5, a0
; RV32IXCHERI-NEXT:    sc ca1, 16(sp)
; RV32IXCHERI-NEXT:    addi a2, sp, 16
; RV32IXCHERI-NEXT:    addi a3, sp, 8
; RV32IXCHERI-NEXT:    addi a0, zero, 8
; RV32IXCHERI-NEXT:    addi a4, zero, 4
; RV32IXCHERI-NEXT:    mv a1, a5
; RV32IXCHERI-NEXT:    call __atomic_exchange
; RV32IXCHERI-NEXT:    lc ca0, 8(sp)
; RV32IXCHERI-NEXT:    lw ra, 28(sp)
; RV32IXCHERI-NEXT:    addi sp, sp, 32
; RV32IXCHERI-NEXT:    ret
;
; RV32IAXCHERI-LABEL: atomicrmw_xchg_cap_acq_rel:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    amoswap.c.aqrl ca0, ca1, (a0)
; RV32IAXCHERI-NEXT:    ret
;
; RV64IXCHERI-LABEL: atomicrmw_xchg_cap_acq_rel:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    addi sp, sp, -48
; RV64IXCHERI-NEXT:    sd ra, 40(sp)
; RV64IXCHERI-NEXT:    mv a5, a0
; RV64IXCHERI-NEXT:    sc ca1, 16(sp)
; RV64IXCHERI-NEXT:    addi a2, sp, 16
; RV64IXCHERI-NEXT:    mv a3, sp
; RV64IXCHERI-NEXT:    addi a0, zero, 16
; RV64IXCHERI-NEXT:    addi a4, zero, 4
; RV64IXCHERI-NEXT:    mv a1, a5
; RV64IXCHERI-NEXT:    call __atomic_exchange
; RV64IXCHERI-NEXT:    lc ca0, 0(sp)
; RV64IXCHERI-NEXT:    ld ra, 40(sp)
; RV64IXCHERI-NEXT:    addi sp, sp, 48
; RV64IXCHERI-NEXT:    ret
;
; RV64IAXCHERI-LABEL: atomicrmw_xchg_cap_acq_rel:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    amoswap.c.aqrl ca0, ca1, (a0)
; RV64IAXCHERI-NEXT:    ret
  %1 = atomicrmw xchg i8 addrspace(200)** %a, i8 addrspace(200)* %b acq_rel
  ret i8 addrspace(200)* %1
}

define i8 addrspace(200)* @atomicrmw_xchg_cap_seq_cst(i8 addrspace(200)** %a, i8 addrspace(200)* %b) nounwind {
; RV32IXCHERI-LABEL: atomicrmw_xchg_cap_seq_cst:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    addi sp, sp, -32
; RV32IXCHERI-NEXT:    sw ra, 28(sp)
; RV32IXCHERI-NEXT:    mv a5, a0
; RV32IXCHERI-NEXT:    sc ca1, 16(sp)
; RV32IXCHERI-NEXT:    addi a2, sp, 16
; RV32IXCHERI-NEXT:    addi a3, sp, 8
; RV32IXCHERI-NEXT:    addi a0, zero, 8
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    mv a1, a5
; RV32IXCHERI-NEXT:    call __atomic_exchange
; RV32IXCHERI-NEXT:    lc ca0, 8(sp)
; RV32IXCHERI-NEXT:    lw ra, 28(sp)
; RV32IXCHERI-NEXT:    addi sp, sp, 32
; RV32IXCHERI-NEXT:    ret
;
; RV32IAXCHERI-LABEL: atomicrmw_xchg_cap_seq_cst:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    amoswap.c.aqrl ca0, ca1, (a0)
; RV32IAXCHERI-NEXT:    ret
;
; RV64IXCHERI-LABEL: atomicrmw_xchg_cap_seq_cst:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    addi sp, sp, -48
; RV64IXCHERI-NEXT:    sd ra, 40(sp)
; RV64IXCHERI-NEXT:    mv a5, a0
; RV64IXCHERI-NEXT:    sc ca1, 16(sp)
; RV64IXCHERI-NEXT:    addi a2, sp, 16
; RV64IXCHERI-NEXT:    mv a3, sp
; RV64IXCHERI-NEXT:    addi a0, zero, 16
; RV64IXCHERI-NEXT:    addi a4, zero, 5
; RV64IXCHERI-NEXT:    mv a1, a5
; RV64IXCHERI-NEXT:    call __atomic_exchange
; RV64IXCHERI-NEXT:    lc ca0, 0(sp)
; RV64IXCHERI-NEXT:    ld ra, 40(sp)
; RV64IXCHERI-NEXT:    addi sp, sp, 48
; RV64IXCHERI-NEXT:    ret
;
; RV64IAXCHERI-LABEL: atomicrmw_xchg_cap_seq_cst:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    amoswap.c.aqrl ca0, ca1, (a0)
; RV64IAXCHERI-NEXT:    ret
  %1 = atomicrmw xchg i8 addrspace(200)** %a, i8 addrspace(200)* %b seq_cst
  ret i8 addrspace(200)* %1
}
