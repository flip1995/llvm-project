; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; The new CheriBoundedStackPseudo instruction lets us pretend that the incoffset+csetbounds
; is a single trivially rematerizable instruction so it can freely move it around to avoid stack spills.
; we were moving the allocation of the register that is only used later to the beginning

; RUN: sed 's/addrspace(200)/addrspace(0)/g' %s | %cheri_llc -o - -O2 -verify-machineinstrs -relocation-model pic | FileCheck -check-prefix MIPS %s
; RUN: %cheri_purecap_llc %s -O2 -o - | %cheri_FileCheck %s

declare void @foo() addrspace(200)
declare void @one_arg(i32 addrspace(200)*) addrspace(200)
declare void @multi_arg(i32 addrspace(200)* %start, i32 addrspace(200)* %end, i8 addrspace(200)* %buf) addrspace(200)


define void @multi_use() addrspace(200) nounwind {
; MIPS-LABEL: multi_use:
; MIPS:       # %bb.0: # %entry
; MIPS-NEXT:    daddiu $sp, $sp, -32
; MIPS-NEXT:    sd $ra, 24($sp) # 8-byte Folded Spill
; MIPS-NEXT:    sd $gp, 16($sp) # 8-byte Folded Spill
; MIPS-NEXT:    sd $16, 8($sp) # 8-byte Folded Spill
; MIPS-NEXT:    lui $1, %hi(%neg(%gp_rel(multi_use)))
; MIPS-NEXT:    daddu $1, $1, $25
; MIPS-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(multi_use)))
; MIPS-NEXT:    ld $25, %call16(foo)($gp)
; MIPS-NEXT:    .reloc .Ltmp0, R_MIPS_JALR, foo
; MIPS-NEXT:  .Ltmp0:
; MIPS-NEXT:    jalr $25
; MIPS-NEXT:    nop
; MIPS-NEXT:    daddiu $16, $sp, 0
; MIPS-NEXT:    daddiu $5, $16, 4
; MIPS-NEXT:    ori $6, $16, 1
; MIPS-NEXT:    ld $25, %call16(multi_arg)($gp)
; MIPS-NEXT:    .reloc .Ltmp1, R_MIPS_JALR, multi_arg
; MIPS-NEXT:  .Ltmp1:
; MIPS-NEXT:    jalr $25
; MIPS-NEXT:    move $4, $16
; MIPS-NEXT:    ld $25, %call16(one_arg)($gp)
; MIPS-NEXT:    .reloc .Ltmp2, R_MIPS_JALR, one_arg
; MIPS-NEXT:  .Ltmp2:
; MIPS-NEXT:    jalr $25
; MIPS-NEXT:    daddiu $4, $sp, 4
; MIPS-NEXT:    ld $25, %call16(one_arg)($gp)
; MIPS-NEXT:    .reloc .Ltmp3, R_MIPS_JALR, one_arg
; MIPS-NEXT:  .Ltmp3:
; MIPS-NEXT:    jalr $25
; MIPS-NEXT:    move $4, $16
; MIPS-NEXT:    ld $16, 8($sp) # 8-byte Folded Reload
; MIPS-NEXT:    ld $gp, 16($sp) # 8-byte Folded Reload
; MIPS-NEXT:    ld $ra, 24($sp) # 8-byte Folded Reload
; MIPS-NEXT:    jr $ra
; MIPS-NEXT:    daddiu $sp, $sp, 32
;
; CHECK-LABEL: multi_use:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -[[STACKFRAME_SIZE:48|96]]
; CHECK-NEXT:    csc $c18, $zero, [[#CAP_SIZE * 2]]($c11)
; CHECK-NEXT:    csc $c17, $zero, [[#CAP_SIZE * 1]]($c11)
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c18, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(foo)($c18)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    nop
; CHECK-NEXT:    cincoffset $c1, $c11, [[#CAP_SIZE - 8]]
; CHECK-NEXT:    csetbounds $c1, $c1, 4
; CHECK-NEXT:    cincoffset $c4, $c1, 4
; CHECK-NEXT:    cincoffset $c5, $c1, 1
; CHECK-NEXT:    clcbi $c12, %capcall20(multi_arg)($c18)
; CHECK-NEXT:    cincoffset $c3, $c11, [[#CAP_SIZE - 8]]
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetbounds $c3, $c3, 4
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c18)
; CHECK-NEXT:    cincoffset $c3, $c11, [[#CAP_SIZE - 4]]
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetbounds $c3, $c3, 4
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c18)
; CHECK-NEXT:    cincoffset $c3, $c11, [[#CAP_SIZE - 8]]
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetbounds $c3, $c3, 4
; CHECK-NEXT:    clc $c17, $zero, [[#CAP_SIZE * 1]]($c11)
; CHECK-NEXT:    clc $c18, $zero, [[#CAP_SIZE * 2]]($c11)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, [[STACKFRAME_SIZE]]

entry:
  %y = alloca i32, align 4, addrspace(200)
  ; Note: if we move the alloca after the call we don't unncesarily save a register
  %x = alloca i32, align 4, addrspace(200)
  call void @foo()
  %x_plus0 = getelementptr inbounds i32, i32 addrspace(200)* %x, i32 0
  %x_plus1 = getelementptr i32, i32 addrspace(200)* %x, i32 1
  %x_i8 = bitcast i32 addrspace(200)* %x to i8 addrspace(200)*
  %x_i8_plus_1 = getelementptr inbounds i8, i8 addrspace(200)* %x_i8, i32 1
  call void @multi_arg(i32 addrspace(200)* %x_plus0, i32 addrspace(200)* %x_plus1, i8 addrspace(200)* %x_i8_plus_1)
  call void @one_arg(i32 addrspace(200)* %y)
  call void @one_arg(i32 addrspace(200)* %x)
  ret void
}
