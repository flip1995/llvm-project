# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# Should be the same both with and without dead-mi elimination
# RUN: %cheri_purecap_llc -run-pass=cheriaddrmodefolder -o - %s | FileCheck %s
# Should should also produce the same thing with dead-mi-elimination
# RUN: %cheri_purecap_llc -run-pass=cheriaddrmodefolder,dead-mi-elimination -verify-machineinstrs %s -o - | FileCheck %s

--- |
  ; ModuleID = '/Users/alex/cheri/llvm-project/llvm/test/CodeGen/Mips/cheri/compiling-with-debug-info-keeps-dead-instrs.c'
  source_filename = "/Users/alex/cheri/llvm-project/llvm/test/CodeGen/Mips/cheri/compiling-with-debug-info-keeps-dead-instrs.c"
  target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"
  target triple = "cheri-unknown-freebsd-purecap"

  ; Function Attrs: nounwind
  define signext i32 @foo(i8 addrspace(200)* nocapture readonly %buffer) local_unnamed_addr addrspace(200) #0 !dbg !11 {
  entry:
    call void @llvm.dbg.value(metadata i8 addrspace(200)* %buffer, metadata !18, metadata !DIExpression()), !dbg !21
    tail call void asm sideeffect "li $$zero, 1", "~{memory},~{$1}"() #2, !dbg !22, !srcloc !23
    %arrayidx = getelementptr inbounds i8, i8 addrspace(200)* %buffer, i64 160, !dbg !24
    %0 = bitcast i8 addrspace(200)* %arrayidx to i32 addrspace(200)*, !dbg !25
    call void @llvm.dbg.value(metadata i32 addrspace(200)* %0, metadata !19, metadata !DIExpression()), !dbg !26
    %1 = load i32, i32 addrspace(200)* %0, align 4, !dbg !27, !tbaa !28
    call void @llvm.dbg.value(metadata i32 %1, metadata !20, metadata !DIExpression()), !dbg !32
    tail call void asm sideeffect "li $$zero, 2", "~{memory},~{$1}"() #2, !dbg !33, !srcloc !34
    %arrayidx1 = getelementptr inbounds i8, i8 addrspace(200)* %buffer, i64 4, !dbg !35
    %2 = load i8, i8 addrspace(200)* %arrayidx1, align 1, !dbg !35, !tbaa !37
    %cmp = icmp eq i8 %2, 97, !dbg !38
    br i1 %cmp, label %if.then, label %if.end, !dbg !39

  if.then:                                          ; preds = %entry
    tail call void asm sideeffect "li $$zero, 3", "~{memory},~{$1}"() #2, !dbg !40, !srcloc !42
    %sunkaddr = getelementptr i8, i8 addrspace(200)* %buffer, i64 160, !dbg !43
    %3 = bitcast i8 addrspace(200)* %sunkaddr to i32 addrspace(200)*, !dbg !43
    %4 = load i32, i32 addrspace(200)* %3, align 4, !dbg !43, !tbaa !28
    %add = add nsw i32 %4, %1, !dbg !44
    call void @llvm.dbg.value(metadata i32 %add, metadata !20, metadata !DIExpression()), !dbg !32
    br label %if.end, !dbg !45

  if.end:                                           ; preds = %if.then, %entry
    %result.0 = phi i32 [ %add, %if.then ], [ %1, %entry ], !dbg !46
    call void @llvm.dbg.value(metadata i32 %result.0, metadata !20, metadata !DIExpression()), !dbg !32
    tail call void asm sideeffect "li $$zero, 4", "~{memory},~{$1}"() #2, !dbg !47, !srcloc !48
    ret i32 %result.0, !dbg !49
  }

  ; Function Attrs: nounwind readnone speculatable
  declare void @llvm.dbg.value(metadata, metadata, metadata) addrspace(200) #1

  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) addrspace(200) #2

  attributes #0 = { nounwind }
  attributes #1 = { nounwind readnone speculatable }
  attributes #2 = { nounwind }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!6, !7, !8, !9}
  !llvm.ident = !{!10}

  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 9.0.0 (https://github.com/CTSRD-CHERI/llvm-project e0b856ef6152bb8ddd5c4f8d1c84d64e55f672ad)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, nameTableKind: None)
  !1 = !DIFile(filename: "/Users/alex/cheri/llvm-project/llvm/test/CodeGen/Mips/cheri/compiling-with-debug-info-keeps-dead-instrs.c", directory: "/Users/alex/cheri/llvm-project/cmake-build-debug/test/CodeGen/Mips/cheri")
  !2 = !{}
  !3 = !{!4}
  !4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 128)
  !5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !6 = !{i32 2, !"Dwarf Version", i32 2}
  !7 = !{i32 2, !"Debug Info Version", i32 3}
  !8 = !{i32 1, !"wchar_size", i32 4}
  !9 = !{i32 7, !"PIC Level", i32 1}
  !10 = !{!"clang version 9.0.0 (https://github.com/CTSRD-CHERI/llvm-project e0b856ef6152bb8ddd5c4f8d1c84d64e55f672ad)"}
  !11 = distinct !DISubprogram(name: "foo", scope: !12, file: !12, line: 17, type: !13, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !17)
  !12 = !DIFile(filename: "llvm/test/CodeGen/Mips/cheri/compiling-with-debug-info-keeps-dead-instrs.c", directory: "/Users/alex/cheri/llvm-project")
  !13 = !DISubroutineType(types: !14)
  !14 = !{!5, !15}
  !15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 128)
  !16 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
  !17 = !{!18, !19, !20}
  !18 = !DILocalVariable(name: "buffer", arg: 1, scope: !11, file: !12, line: 17, type: !15)
  !19 = !DILocalVariable(name: "value", scope: !11, file: !12, line: 19, type: !4)
  !20 = !DILocalVariable(name: "result", scope: !11, file: !12, line: 20, type: !5)
  !21 = !DILocation(line: 17, column: 15, scope: !11)
  !22 = !DILocation(line: 18, column: 3, scope: !11)
  !23 = !{i32 521}
  !24 = !DILocation(line: 19, column: 23, scope: !11)
  !25 = !DILocation(line: 19, column: 16, scope: !11)
  !26 = !DILocation(line: 19, column: 8, scope: !11)
  !27 = !DILocation(line: 20, column: 16, scope: !11)
  !28 = !{!29, !29, i64 0}
  !29 = !{!"int", !30, i64 0}
  !30 = !{!"omnipotent char", !31, i64 0}
  !31 = !{!"Simple C/C++ TBAA"}
  !32 = !DILocation(line: 20, column: 7, scope: !11)
  !33 = !DILocation(line: 21, column: 3, scope: !11)
  !34 = !{i32 625}
  !35 = !DILocation(line: 22, column: 7, scope: !36)
  !36 = distinct !DILexicalBlock(scope: !11, file: !12, line: 22, column: 7)
  !37 = !{!30, !30, i64 0}
  !38 = !DILocation(line: 22, column: 17, scope: !36)
  !39 = !DILocation(line: 22, column: 7, scope: !11)
  !40 = !DILocation(line: 23, column: 5, scope: !41)
  !41 = distinct !DILexicalBlock(scope: !36, file: !12, line: 22, column: 25)
  !42 = !{i32 699}
  !43 = !DILocation(line: 24, column: 15, scope: !41)
  !44 = !DILocation(line: 24, column: 12, scope: !41)
  !45 = !DILocation(line: 25, column: 3, scope: !41)
  !46 = !DILocation(line: 0, scope: !11)
  !47 = !DILocation(line: 26, column: 3, scope: !11)
  !48 = !{i32 771}
  !49 = !DILocation(line: 27, column: 3, scope: !11)

...
---
name:            foo
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gpr32, preferred-register: '' }
  - { id: 1, class: gpr32, preferred-register: '' }
  - { id: 2, class: gpr32, preferred-register: '' }
  - { id: 3, class: cherigpr, preferred-register: '' }
  - { id: 4, class: cherigpr, preferred-register: '' }
  - { id: 5, class: cherigpr, preferred-register: '' }
  - { id: 6, class: gpr32, preferred-register: '' }
  - { id: 7, class: gpr32, preferred-register: '' }
  - { id: 8, class: cherigpr, preferred-register: '' }
  - { id: 9, class: gpr32, preferred-register: '' }
  - { id: 10, class: gpr64, preferred-register: '' }
liveins:
  - { reg: '$c3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
constants:       []
body:             |
  ; CHECK-LABEL: name: foo
  ; CHECK:      bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $c3
  ; CHECK:        DBG_VALUE $c3, $noreg, !18, !DIExpression(), debug-location !21
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:cherigpr = COPY $c3
  ; CHECK-NEXT:   DBG_VALUE [[COPY]], $noreg, !18, !DIExpression(), debug-location !21
  ; CHECK-NEXT:   INLINEASM &"li $$zero, 1", 25 /* sideeffect mayload maystore attdialect */, 12 /* clobber */, implicit-def early-clobber $at, !23, debug-location !22
  ; This used to keep the cincoffsetimm even though it was only used by debug instructions
  ; CHECK-NOT: CIncOffsetImm
  ; The DBG_VALUE should have been updated to use $noreg:
  ; CHECK-NEXT: DBG_VALUE $noreg, $noreg, !19, !DIExpression(), debug-location !26
  ; CHECK-NEXT:   [[CAPLOAD32_:%[0-9]+]]:gpr32 = CAPLOAD32 $zero_64, 160, [[COPY]], debug-location !27 :: (load 4 from %ir.0, !tbaa !28, addrspace 200)

  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $c3

    DBG_VALUE $c3, $noreg, !18, !DIExpression(), debug-location !21
    %3:cherigpr = COPY $c3
    DBG_VALUE %3, $noreg, !18, !DIExpression(), debug-location !21
    INLINEASM &"li $$zero, 1", 25, 12, implicit-def early-clobber $at, !23, debug-location !22
    %4:cherigpr = CIncOffsetImm %3, 160, debug-location !24
    DBG_VALUE %4, $noreg, !19, !DIExpression(), debug-location !26
    %0:gpr32 = CAPLOAD32 $zero_64, 0, %4, debug-location !27 :: (load 4 from %ir.0, !tbaa !28, addrspace 200)
    DBG_VALUE %0, $noreg, !20, !DIExpression(), debug-location !32
    INLINEASM &"li $$zero, 2", 25, 12, implicit-def early-clobber $at, !34, debug-location !33
    %5:cherigpr = CIncOffsetImm %3, 4, debug-location !35
    %6:gpr32 = CAPLOADU832 $zero_64, 0, killed %5, debug-location !35 :: (load 1 from %ir.arrayidx1, !tbaa !37, addrspace 200)
    %7:gpr32 = ADDiu $zero, 97
    BNE killed %6, killed %7, %bb.2, implicit-def dead $at, debug-location !39
    B %bb.1, implicit-def dead $at, debug-location !39

  bb.1.if.then:
    successors: %bb.2(0x80000000)

    INLINEASM &"li $$zero, 3", 25, 12, implicit-def early-clobber $at, !42, debug-location !40
    %9:gpr32 = CAPLOAD32 $zero_64, 0, %4, debug-location !43 :: (load 4 from %ir.3, !tbaa !28, addrspace 200)
    %1:gpr32 = nsw ADDu killed %9, %0, debug-location !44
    DBG_VALUE %1, $noreg, !20, !DIExpression(), debug-location !32

  bb.2.if.end:
    %2:gpr32 = PHI %0, %bb.0, %1, %bb.1, debug-location !46
    DBG_VALUE %2, $noreg, !20, !DIExpression(), debug-location !32
    INLINEASM &"li $$zero, 4", 25, 12, implicit-def early-clobber $at, !48, debug-location !47
    %10:gpr64 = SLL64_32 %2, debug-location !49
    $v0_64 = COPY %10, debug-location !49
    CapRetPseudo implicit $v0_64, debug-location !49

...
