; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc %s -o - | FileCheck %s --check-prefix=CHECK-INEXACT
; RUN: %cheri_llc -mattr=+cheri-exact-equals %s -o - | FileCheck %s --check-prefix=CHECK-EXACT
; RUN: %cheri_llc -mattr=-cheri-exact-equals %s -o - | FileCheck %s --check-prefix=CHECK-INEXACT

define i32 @eq(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: eq:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    ceq $2, $c3, $c4
;
; CHECK-EXACT-LABEL: eq:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cexeq $2, $c3, $c4
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: ne:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cne $2, $c3, $c4
;
; CHECK-EXACT-LABEL: ne:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cnexeq $2, $c3, $c4
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: lt:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    clt $2, $c3, $c4
;
; CHECK-EXACT-LABEL: lt:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    clt $2, $c3, $c4
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}
define i32 @ult(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: ult:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cltu $2, $c3, $c4
;
; CHECK-EXACT-LABEL: ult:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cltu $2, $c3, $c4
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: le:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cle $2, $c3, $c4
;
; CHECK-EXACT-LABEL: le:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cle $2, $c3, $c4
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: ule:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cleu $2, $c3, $c4
;
; CHECK-EXACT-LABEL: ule:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cleu $2, $c3, $c4
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: gt:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    clt $2, $c4, $c3
;
; CHECK-EXACT-LABEL: gt:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    clt $2, $c4, $c3
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: ugt:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cltu $2, $c4, $c3
;
; CHECK-EXACT-LABEL: ugt:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cltu $2, $c4, $c3
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: ge:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cle $2, $c4, $c3
;
; CHECK-EXACT-LABEL: ge:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cle $2, $c4, $c3
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: uge:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cleu $2, $c4, $c3
;
; CHECK-EXACT-LABEL: uge:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cleu $2, $c4, $c3
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i1 @llvm.cheri.cap.equal.exact(i8 addrspace(200)*, i8 addrspace(200)*)

define i32 @exeq(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: exeq:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cexeq $2, $c3, $c4
;
; CHECK-EXACT-LABEL: exeq:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cexeq $2, $c3, $c4
  %cmp = call i1 @llvm.cheri.cap.equal.exact(i8 addrspace(200)* %a, i8 addrspace(200)* %b)
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @nexeq(i8 addrspace(200)* %a, i8 addrspace(200)* readnone %b) nounwind {
; CHECK-INEXACT-LABEL: nexeq:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cnexeq $2, $c3, $c4
;
; CHECK-EXACT-LABEL: nexeq:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cnexeq $2, $c3, $c4
  %cmp = call i1 @llvm.cheri.cap.equal.exact(i8 addrspace(200)* %a, i8 addrspace(200)* %b)
  %not = xor i1 %cmp, true
  %conv = zext i1 %not to i32
  ret i32 %conv
}
