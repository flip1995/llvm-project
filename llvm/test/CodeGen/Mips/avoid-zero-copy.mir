# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# Check that we can remove the redundant copy of constant registers such as $zero
# RUN: llc -march=mips64 -start-after=machine-cp -o - %s
# RUN: llc -cheri-cap-table-abi=pcrel %s -verify-machineinstrs -run-pass=machine-cp -o - | FileCheck %s
--- |
  target datalayout = "E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128"
  target triple = "mips64-unknown-freebsd"
  declare i32 @b() #0
  ; Function Attrs: nounwind
  define i32 @a(...) #0 {
    %ret = call i32 @b()
    ret i32 %ret
  }

  attributes #0 = { nounwind }

...
---
name:            a
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a0_64, $t9_64, $ra_64, $fp_64, $gp_64
    ; CHECK-LABEL: name: a
    ; CHECK: liveins: $a0_64, $t9_64, $ra_64, $fp_64, $gp_64
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK: $a0_64 = COPY $zero_64
    ; CHECK: JALR64Pseudo $t9_64, csr_n64, implicit-def dead $ra, implicit $a0_64, implicit $gp_64, implicit-def $sp, implicit-def $v0
    ; CHECK: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK: $a0_64 = COPY $zero_64
    ; CHECK: PseudoReturn64 undef $ra_64, implicit $v0_64, implicit killed $a0_64
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    renamable $s0_64 = COPY $zero_64
    $a0_64 = COPY renamable $s0_64
    JALR64Pseudo $t9_64, csr_n64, implicit-def dead $ra, implicit $a0_64, implicit $gp_64, implicit-def $sp, implicit-def $v0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    $a0_64 = COPY killed renamable $s0_64
    PseudoReturn64 undef $ra_64, implicit $v0_64, implicit killed $a0_64

...
