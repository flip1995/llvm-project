; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; CHERI-GENERIC-UTC: mir
; RUN: llc @PURECAP_HARDFLOAT_ARGS@ %s -o - --stop-after=finalize-isel | FileCheck %s

; Check that lifetime markers don't get lost due to CheriBoundAllocas, as we'd
; risk StackSlotColoring reusing the slot.
; TODO: This is currently broken.

declare void @use(i8 addrspace(200)*)

define void @static_alloca() {
  %1 = alloca i32, align 4, addrspace(200)
  %2 = bitcast i32 addrspace(200)* %1 to i8 addrspace(200)*
  call void @llvm.lifetime.start.p200i8(i64 4, i8 addrspace(200)* %2)
  call void @use(i8 addrspace(200)* %2)
  call void @llvm.lifetime.end.p200i8(i64 4, i8 addrspace(200)* %2)
  ret void
}

; LIFETIME_START/LIFETIME_END only apply to static allocas, so we can't verify
; that the analysis works correctly, but the IR is here for completeness.
define void @dynamic_alloca(i64 zeroext %n) {
  %1 = alloca i32, i64 %n, align 4, addrspace(200)
  %2 = bitcast i32 addrspace(200)* %1 to i8 addrspace(200)*
  call void @llvm.lifetime.start.p200i8(i64 -1, i8 addrspace(200)* %2)
  call void @use(i8 addrspace(200)* %2)
  call void @llvm.lifetime.end.p200i8(i64 -1, i8 addrspace(200)* %2)
  ret void
}

declare void @llvm.lifetime.start.p200i8(i64, i8 addrspace(200)*)
declare void @llvm.lifetime.end.p200i8(i64, i8 addrspace(200)*)
