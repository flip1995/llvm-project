; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; test that the Simplify CFG pass doesn't insert a switch statement for a
; capability (which leads to inserting a ptrtoint)
; RUN: %cheri_opt < %s -simplifycfg -S -debug-only=simplifycfg,infer-tag 2>%t.dbg | FileCheck %s --implicit-check-not=ptrtoint
; RUN: FileCheck %s -check-prefix DBG -input-file=%t.dbg
; DBG: Checking if value is untagged:i32 addrspace(200)* %e
; DBG-NEXT: isKnownUntaggedCapability(d=0): unknown value -> false -- i32 addrspace(200)* %e
; DBG-NEXT: Not converting 'icmp' chain with 2 cases into vaddr SWITCH since the source could be a tagged capability
; REQUIRES: asserts

source_filename = "nulltest2.c"
target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"
target triple = "cheri-unknown-freebsd"

@.str = private unnamed_addr addrspace(200) constant [6 x i8] c"world\00", align 1
@.str.1 = private unnamed_addr addrspace(200) constant [6 x i8] c"hello\00", align 1

; Function Attrs: nounwind
define void @g() #0 {
; CHECK-LABEL: @g(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @puts(i8 addrspace(200)* getelementptr inbounds ([6 x i8], [6 x i8] addrspace(200)* @.str, i64 0, i64 0))
; CHECK-NEXT:    ret void
;
entry:
  call void @puts(i8 addrspace(200)* getelementptr inbounds ([6 x i8], [6 x i8] addrspace(200)* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind
declare void @puts(i8 addrspace(200)* nocapture readonly) #1

; Function Attrs: nounwind readnone
declare i8 addrspace(200)* @llvm.cheri.pcc.get() #2

; Function Attrs: nounwind readnone
declare i8 addrspace(200)* @llvm.cheri.cap.offset.set.i64(i8 addrspace(200)*, i64) #2

; Function Attrs: nounwind
define void @foo(i8 addrspace(200)* %x) local_unnamed_addr #0 {
; Previously we were generating a %magicptr = ptrtoint i8 addrspace(200)* %x to i64 here
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 addrspace(200)* [[X:%.*]], null
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    call void @g()
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq i8 addrspace(200)* [[X]], null
; CHECK-NEXT:    br i1 [[CMP1]], label [[IF_ELSE:%.*]], label [[IF_END3:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    call void @puts(i8 addrspace(200)* getelementptr inbounds ([6 x i8], [6 x i8] addrspace(200)* @.str.1, i64 0, i64 0))
; CHECK-NEXT:    br label [[IF_END3]]
; CHECK:       if.end3:
; CHECK-NEXT:    ret void
;
entry:
  %cmp = icmp eq i8 addrspace(200)* %x, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @g()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp1 = icmp eq i8 addrspace(200)* %x, null
  br i1 %cmp1, label %if.else, label %if.end3

if.else:                                          ; preds = %if.end
  call void @puts(i8 addrspace(200)* getelementptr inbounds ([6 x i8], [6 x i8] addrspace(200)* @.str.1, i64 0, i64 0))
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.else
  ret void
}


; https://github.com/CTSRD-CHERI/llvm-project/issues/332
; Function Attrs: nounwind
define signext i32 @issue332(i32 addrspace(200)* %e, i32 %value) local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: @issue332(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp eq i32 [[VALUE:%.*]], 0
; CHECK-NEXT:    br i1 [[TOBOOL]], label [[IF_END2:%.*]], label [[IF_THEN:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[CALL:%.*]] = call signext i32 @func1()
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 addrspace(200)* [[E:%.*]], null
; CHECK-NEXT:    [[TOBOOL3:%.*]] = icmp eq i32 addrspace(200)* [[E]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[TOBOOL3]]
; CHECK-NEXT:    br i1 [[OR_COND]], label [[CLEANUP:%.*]], label [[LAND_RHS:%.*]]
; CHECK:       if.end2:
; CHECK-NEXT:    [[TOBOOL3_OLD:%.*]] = icmp eq i32 addrspace(200)* [[E]], null
; CHECK-NEXT:    br i1 [[TOBOOL3_OLD]], label [[CLEANUP]], label [[LAND_RHS]]
; CHECK:       land.rhs:
; CHECK-NEXT:    [[CALL4:%.*]] = call signext i32 @func2()
; CHECK-NEXT:    br label [[CLEANUP]]
; CHECK:       cleanup:
; CHECK-NEXT:    ret i32 0
;
entry:
  %tobool = icmp eq i32 %value, 0
  br i1 %tobool, label %if.end2, label %if.then

if.then:                                          ; preds = %entry
  %call = call signext i32 @func1()
  %cmp = icmp eq i32 addrspace(200)* %e, null
  %tobool3 = icmp eq i32 addrspace(200)* %e, null
  %or.cond = or i1 %cmp, %tobool3
  br i1 %or.cond, label %cleanup, label %land.rhs

if.end2:                                          ; preds = %entry
  %tobool3.old = icmp eq i32 addrspace(200)* %e, null
  br i1 %tobool3.old, label %cleanup, label %land.rhs

land.rhs:                                         ; preds = %if.then, %if.end2
  %call4 = call signext i32 @func2()
  br label %cleanup

cleanup:                                          ; preds = %land.rhs, %if.end2, %if.then
  ret i32 0
}

declare signext i32 @func1() local_unnamed_addr addrspace(200) #1
declare signext i32 @func2() local_unnamed_addr addrspace(200) #1


attributes #0 = { nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
