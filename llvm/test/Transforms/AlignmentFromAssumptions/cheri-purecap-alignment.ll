; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes
; RUN: opt -S -passes=alignment-from-assumptions < %s | FileCheck %s
; This previously triggered an invalid cast to a SCEVConstant since SCEV
; is disabled for capabilities (we always return SCEVUnknown).
target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"

define dso_local i8 addrspace(200)* @assume_variable(i8 addrspace(200)* %ptr, i64 %alignment) addrspace(200) nounwind {
; CHECK-LABEL: define {{[^@]+}}@assume_variable
; CHECK-SAME: (i8 addrspace(200)* [[PTR:%.*]], i64 [[ALIGNMENT:%.*]]) addrspace(200) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(i8 addrspace(200)* [[PTR]], i64 [[ALIGNMENT]]) ]
; CHECK-NEXT:    tail call void @llvm.memset.p200i8.i64(i8 addrspace(200)* align 1 [[PTR]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    ret i8 addrspace(200)* [[PTR]]
;
  call void @llvm.assume(i1 true) [ "align"(i8 addrspace(200)* %ptr, i64 %alignment) ]
  ; Calling memset here ensures that alignment-from-assumptions tries to update the pointer alignment:
  tail call void @llvm.memset.p200i8.i64(i8 addrspace(200)* align 1 %ptr, i8 0, i64 16, i1 false)
  ret i8 addrspace(200)* %ptr
}

define dso_local i8 addrspace(200)* @assume_const(i8 addrspace(200)* %ptr) addrspace(200) nounwind {
; CHECK-LABEL: define {{[^@]+}}@assume_const
; CHECK-SAME: (i8 addrspace(200)* [[PTR:%.*]]) addrspace(200) #[[ATTR0]] {
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(i8 addrspace(200)* [[PTR]], i64 16) ]
; CHECK-NEXT:    tail call void @llvm.memset.p200i8.i64(i8 addrspace(200)* align 16 [[PTR]], i8 0, i64 16, i1 false)
; CHECK-NEXT:    ret i8 addrspace(200)* [[PTR]]
;
  call void @llvm.assume(i1 true) [ "align"(i8 addrspace(200)* %ptr, i64 16) ]
  ; Calling memset here ensures that alignment-from-assumptions tries to update the pointer alignment:
  tail call void @llvm.memset.p200i8.i64(i8 addrspace(200)* align 1 %ptr, i8 0, i64 16, i1 false)
  ret i8 addrspace(200)* %ptr
}

declare void @llvm.assume(i1 noundef) addrspace(200)

declare void @llvm.memset.p200i8.i64(i8 addrspace(200)* nocapture writeonly, i8, i64, i1 immarg) addrspace(200)

