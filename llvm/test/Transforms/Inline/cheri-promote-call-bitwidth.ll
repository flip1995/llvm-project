; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes
; RUN: opt -enable-new-pm=1 -S -passes=inline < %s | FileCheck %s
; RUN: sed -e 's/addrspace(200)/addrspace(0)/g' -e 's/-A200-P200-G200//g' %s | opt -enable-new-pm=1 -S -passes=inline| FileCheck %s --check-prefix=HYBRID
; This test case (reduce from compiling libunwind) previously triggered an assertion in the
; inliner when trying to promote an indirect (virtual) call (inside llvm::tryPromoteCall)
; Assertion failed: (BitWidth == DL.getIndexTypeSizeInBits(getType()) && "The offset bit width does not match the DL specification."), function stripAndAccumulateConstantOffsets
target datalayout = "e-m:e-pf200:128:128:128:64-p:64:64-i64:64-i128:128-n64-S128-A200-P200-G200"
target triple = "riscv64-unknown-freebsd13.0"

%class.f = type <{ i32 (...) addrspace(200)* addrspace(200)*, %class.a, [15 x i8] }>
%class.a = type { i8 }

define void @test(%class.f addrspace(200)* %arg1, void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* %arg2) local_unnamed_addr addrspace(200) {
; CHECK-LABEL: define {{[^@]+}}@test
; CHECK-SAME: ([[CLASS_F:%.*]] addrspace(200)* [[ARG1:%.*]], void ([[CLASS_F]] addrspace(200)*) addrspace(200)* addrspace(200)* [[ARG2:%.*]]) local_unnamed_addr addrspace(200) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load void ([[CLASS_F]] addrspace(200)*) addrspace(200)*, void ([[CLASS_F]] addrspace(200)*) addrspace(200)* addrspace(200)* [[ARG2]], align 16
; CHECK-NEXT:    call void [[TMP0]]([[CLASS_F]] addrspace(200)* [[ARG1]])
; CHECK-NEXT:    ret void
;
; HYBRID-LABEL: define {{[^@]+}}@test
; HYBRID-SAME: (%class.f* [[ARG1:%.*]], void (%class.f*)** [[ARG2:%.*]]) local_unnamed_addr {
; HYBRID-NEXT:  entry:
; HYBRID-NEXT:    [[TMP0:%.*]] = load void (%class.f*)*, void (%class.f*)** [[ARG2]], align 16
; HYBRID-NEXT:    call void [[TMP0]](%class.f* [[ARG1]])
; HYBRID-NEXT:    ret void
;
entry:
  call void @call_fnptr(%class.f addrspace(200)* %arg1, void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* %arg2)
  ret void
}

define internal void @call_fnptr(%class.f addrspace(200)* %this, void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* %arg) unnamed_addr addrspace(200) align 2 {
entry:
  %0 = load void (%class.f addrspace(200)*) addrspace(200)*, void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* %arg, align 16
  call void %0(%class.f addrspace(200)* %this)
  ret void
}

define void @test2(%class.f addrspace(200)* %this) local_unnamed_addr addrspace(200) {
; CHECK-LABEL: define {{[^@]+}}@test2
; CHECK-SAME: ([[CLASS_F:%.*]] addrspace(200)* [[THIS:%.*]]) local_unnamed_addr addrspace(200) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast [[CLASS_F]] addrspace(200)* [[THIS]] to void ([[CLASS_F]] addrspace(200)*) addrspace(200)* addrspace(200)* addrspace(200)*
; CHECK-NEXT:    [[VTABLE_I:%.*]] = load void ([[CLASS_F]] addrspace(200)*) addrspace(200)* addrspace(200)*, void ([[CLASS_F]] addrspace(200)*) addrspace(200)* addrspace(200)* addrspace(200)* [[TMP0]], align 16
; CHECK-NEXT:    [[FN_I:%.*]] = load void ([[CLASS_F]] addrspace(200)*) addrspace(200)*, void ([[CLASS_F]] addrspace(200)*) addrspace(200)* addrspace(200)* [[VTABLE_I]], align 16
; CHECK-NEXT:    call void [[FN_I]]([[CLASS_F]] addrspace(200)* [[THIS]])
; CHECK-NEXT:    ret void
;
; HYBRID-LABEL: define {{[^@]+}}@test2
; HYBRID-SAME: (%class.f* [[THIS:%.*]]) local_unnamed_addr {
; HYBRID-NEXT:  entry:
; HYBRID-NEXT:    [[TMP0:%.*]] = bitcast %class.f* [[THIS]] to void (%class.f*)***
; HYBRID-NEXT:    [[VTABLE_I:%.*]] = load void (%class.f*)**, void (%class.f*)*** [[TMP0]], align 16
; HYBRID-NEXT:    [[FN_I:%.*]] = load void (%class.f*)*, void (%class.f*)** [[VTABLE_I]], align 16
; HYBRID-NEXT:    call void [[FN_I]](%class.f* [[THIS]])
; HYBRID-NEXT:    ret void
;
entry:
  call void @call_via_vtable(%class.f addrspace(200)* %this)
  ret void
}

define internal void @call_via_vtable(%class.f addrspace(200)* %this) unnamed_addr addrspace(200) {
entry:
  %0 = bitcast %class.f addrspace(200)* %this to void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* addrspace(200)*
  %vtable = load void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)*, void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* addrspace(200)* %0, align 16
  %fn = load void (%class.f addrspace(200)*) addrspace(200)*, void (%class.f addrspace(200)*) addrspace(200)* addrspace(200)* %vtable, align 16
  call void %fn(%class.f addrspace(200)* %this)
  ret void
}
