// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature
// This was previously asserting in TryEmitBaseDestructorAsAlias()
// RUN: %cheri_purecap_cc1 -mconstructor-aliases -mllvm -cheri-cap-table-abi=pcrel -O2 -std=c++11 -fcxx-exceptions -fexceptions -o - -emit-llvm %s | FileCheck %s

class a {
public:
  static a b;
};
class c {
public:
  ~c();
};
class C : c {
public:
  C(int *, a);
};
int d;
// CHECK-LABEL: define {{[^@]+}}@_Z1ev
// CHECK-SAME: () local_unnamed_addr addrspace(200) [[ATTR0:#.*]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AGG_TMP_ENSURED:%.*]] = alloca [[CLASS_C:%.*]], align 1, addrspace(200)
// CHECK-NEXT:    call void @_ZN1CC1EPi1a(%class.C addrspace(200)* nonnull dereferenceable(1) [[AGG_TMP_ENSURED]], i32 addrspace(200)* nonnull @d, i8 inreg undef)
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast [[CLASS_C]] addrspace(200)* [[AGG_TMP_ENSURED]] to [[CLASS_C:%.*]] addrspace(200)*
// CHECK-NEXT:    call void @_ZN1cD2Ev(%class.c addrspace(200)* nonnull dereferenceable(1) [[TMP0]]) [[ATTR3:#.*]]
// CHECK-NEXT:    ret void
//
void e() { C(&d, a::b); }

// UTC_ARGS: --disable
// C::C(int* cap, a):
// CHECK: declare void @_ZN1CC1EPi1a(%class.C addrspace(200)* dereferenceable(1), i32 addrspace(200)*, i8 inreg) unnamed_addr
